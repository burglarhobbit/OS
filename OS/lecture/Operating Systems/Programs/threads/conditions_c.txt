/********************************************************************************/
/*   Example code for using Pthreads conditional variables.  The main thread    */
/*   creates three threads.  Two of those threads increment a "count" variable, */
/*   while the third thread watches the value of "count".  When the "count"     */
/*   reaches a predefined limit, the watchinging thread is signaled by one of   */
/*   the incrementing threads.                                                  */
/*                                                                              */  
/********************************************************************************/

#include <pthread.h>
#include <stdio.h>

#define NUM_THREADS  3
#define TCOUNT 10
#define COUNT_LIMIT 12

int     count = 0;
int     thread_ids[3] = {0,1,2};
pthread_mutex_t count_mutex;
pthread_cond_t count_threshold_cv;

void *inc_count(void *idp) 
{
  int j,i;
  double result=0.0;
  int *my_id = idp;

  for (i=0; i < TCOUNT; i++) {
    pthread_mutex_lock(&count_mutex);
    count++;

    /* Check the value of count and signal waiting thread when the condition is
       reached.  Note that this occurs while mutex is locked. */
    if (count == COUNT_LIMIT) {
      /* Use man to look at pthread_cond_signal */
      pthread_cond_signal(&count_threshold_cv);
      printf("inc_count(): thread %d, count = %d  Threshold reached.\n", *my_id, count);
    }
    printf("inc_count(): thread %d, count = %d, unlocking mutex\n", *my_id, count);
    /* Use man to look at pthread_mutex_unlock */
    pthread_mutex_unlock(&count_mutex);

    /* Do sleep so threads can "alternate" on mutex lock */
    /* The thread could sleep for 1 to 3 seconds. */
    sleep(1 + lrand48() % 3);
  }

  pthread_exit(NULL);
}

void *watch_count(void *idp) 
{
  int *my_id = idp;

  printf("Starting watch_count(): thread %d\n", *my_id);

  /* Lock mutex and wait for signal.  Note that the pthread_cond_wait routine
     will automatically unlock mutex while it waits. 
     Also, note that if COUNT_LIMIT is reached before this routine is run by
     the waiting thread, the loop will be skipped to prevent pthread_cond_wait
     from never returning.
  */
  /* Use man to look at pthread_mutex_lock */
  pthread_mutex_lock(&count_mutex);
  while (count < COUNT_LIMIT) {
    /* Use man to look at pthread_cond_wait */
    /* This is a very important pthread function */
    pthread_cond_wait(&count_threshold_cv, &count_mutex);
    printf("watch_count(): thread %d Condition signal received.\n", *my_id);
  }

  /* Use man to look at pthread_mutex_unlock */
  pthread_mutex_unlock(&count_mutex);
  /* Use man to look at pthread_exit */
  pthread_exit(NULL);
}

int main(int argc, char *argv[])
{
  int i, rc;
  pthread_t threads[3];
  pthread_attr_t attr;
  time_t t1;

  /* srand48() sets the seed for the random number generator.  */
  /* It is important to have different seeds when we call the  */
  /* functions otherwise the same set of pseudo-random numbers */
  /* will generated. time() always provides a unique seed.     */

  /* Use man -s 2 time to see what it does.                    */
  time(&t1);

  /* Use time in seconds to set seed, initialize the generator */
  /* Use man srand48 to see what it does.                      */
  srand48((long) t1);


  /* Initialize mutex and conditional variable objects */
  /* Use man to look at pthread_mutex_init and pthread_cond_init */
  pthread_mutex_init(&count_mutex, NULL);
  pthread_cond_init (&count_threshold_cv, NULL);

  /* For portability, explicitly create threads in a joinable state */
  /* Use man to look at pthread_attr_init and pthread_attr_setdetachstate */
  pthread_attr_init(&attr);
  pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_JOINABLE);

  /* Two threads which increase the count */
  /* Use man to look at pthread_create */
  pthread_create(&threads[0], &attr, inc_count, (void *)&thread_ids[0]);
  pthread_create(&threads[1], &attr, inc_count, (void *)&thread_ids[1]);

  /* A thread which watches the count */
  pthread_create(&threads[2], &attr, watch_count, (void *)&thread_ids[2]);

  /* Wait for all threads to complete */
  /* Use man to look at pthread_join  */  
  for (i = 0; i < NUM_THREADS; i++) {
    pthread_join(threads[i], NULL);
  }
  printf ("Main(): Waited on %d  threads. Done.\n", NUM_THREADS);

  /* Clean up and exit */
  /* Use man to look at the following pthread functions */
  pthread_attr_destroy(&attr);
  pthread_mutex_destroy(&count_mutex);
  pthread_cond_destroy(&count_threshold_cv);
  pthread_exit(NULL);
}



